{"ast":null,"code":"/**\n * Authentication service for user login, registration, and session management\n */\n//הקובץ אחראי על - Login, Register, ניהול\n\nimport API_CONFIG from \"../config/api.config\";\nconst AUTH_TOKEN_KEY = \"auth_token\";\nconst USER_DATA_KEY = \"user_data\";\n\n//פונקציית-עזר כללית לביצוע קריאות - fetch\nconst authRequest = async (endpoint, method = \"POST\", data = null) => {\n  console.log(`authService: Making ${method} request to ${endpoint}`, data);\n  const options = {\n    method,\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  if (data) {\n    options.body = JSON.stringify(data);\n  }\n\n  //שליפה של הטוקן מה-session אם קיים\n  const token = getToken();\n  if (token) {\n    options.headers[\"Authorization\"] = `Bearer ${token}`;\n  }\n\n  //הרכבת כתובת-ה-API המלאה.\n  try {\n    const url = `${API_CONFIG.BASE_URL}${endpoint}`;\n    console.log(`authService: Fetching from ${url}`, options);\n    const response = await fetch(url, options);\n    console.log(`authService: Response status:`, response.status);\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({}));\n      console.error(\"authService: Request failed with status\", response.status, errorData);\n      throw new Error(errorData.message || `שגיאת שרת: ${response.status}`);\n    }\n    const responseData = await response.json();\n    console.log(\"authService: Request successful\", responseData);\n    return responseData;\n  } catch (error) {\n    console.error(\"authService: Request failed:\", error);\n    throw error;\n  }\n};\n\n// Save auth token and user data to session storage\nconst setSession = (token, userData) => {\n  sessionStorage.setItem(AUTH_TOKEN_KEY, token);\n  sessionStorage.setItem(USER_DATA_KEY, JSON.stringify(userData));\n};\n\n// Clear auth token and user data from session storage\nconst clearSession = () => {\n  sessionStorage.removeItem(AUTH_TOKEN_KEY);\n  sessionStorage.removeItem(USER_DATA_KEY);\n};\n\n// Get auth token from session storage\nconst getToken = () => {\n  return sessionStorage.getItem(AUTH_TOKEN_KEY);\n};\n\n// Get user data from session storage\nconst getUserData = () => {\n  const userData = sessionStorage.getItem(USER_DATA_KEY);\n  return userData ? JSON.parse(userData) : null;\n};\n\n// Check if user is authenticated\nconst isAuthenticated = () => {\n  return !!getToken();\n};\n\n// Check if user has admin role\nconst isAdmin = () => {\n  const userData = getUserData();\n  return userData && userData.user_type === \"admin\";\n};\n\n// Authentication service\nconst authService = {\n  // User login\n  login: async (email, password) => {\n    console.log(\"authService.login: Starting login process\", {\n      email\n    });\n    try {\n      const data = await authRequest(\"/auth/login\", \"POST\", {\n        email,\n        password\n      });\n      console.log(\"authService.login: Login successful\", data);\n      if (data.token && data.user) {\n        console.log(\"authService.login: Setting session\");\n        setSession(data.token, data.user);\n      } else {\n        console.warn(\"authService.login: Missing token or user data in response\");\n      }\n      return data;\n    } catch (error) {\n      console.error(\"authService.login: Login failed\", error);\n      throw error;\n    }\n  },\n  // User registration\n  register: async userData => {\n    const data = await authRequest(\"/auth/register\", \"POST\", userData);\n    return data;\n  },\n  // User logout\n  logout: () => {\n    clearSession();\n  },\n  // Password reset request\n  resetPassword: async email => {\n    return await authRequest(\"/auth/reset-password\", \"POST\", {\n      email\n    });\n  },\n  // Get current user\n  getCurrentUser: () => {\n    return getUserData();\n  },\n  // Check if user is authenticated\n  isAuthenticated,\n  // Check if user has admin role\n  isAdmin\n};\nexport default authService;","map":{"version":3,"names":["API_CONFIG","AUTH_TOKEN_KEY","USER_DATA_KEY","authRequest","endpoint","method","data","console","log","options","headers","body","JSON","stringify","token","getToken","url","BASE_URL","response","fetch","status","ok","errorData","json","catch","error","Error","message","responseData","setSession","userData","sessionStorage","setItem","clearSession","removeItem","getItem","getUserData","parse","isAuthenticated","isAdmin","user_type","authService","login","email","password","user","warn","register","logout","resetPassword","getCurrentUser"],"sources":["C:/Users/lanan/Downloads/NodeSemesteryalyLanaMerna/HealthyLifeStyleByMelana/client/src/services/auth.js"],"sourcesContent":["/**\n * Authentication service for user login, registration, and session management\n */\n//הקובץ אחראי על - Login, Register, ניהול\n\nimport API_CONFIG from \"../config/api.config\";\n\nconst AUTH_TOKEN_KEY = \"auth_token\";\nconst USER_DATA_KEY = \"user_data\";\n\n//פונקציית-עזר כללית לביצוע קריאות - fetch\nconst authRequest = async (endpoint, method = \"POST\", data = null) => {\n  console.log(`authService: Making ${method} request to ${endpoint}`, data);\n\n  const options = {\n    method,\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n  }\n\n  //שליפה של הטוקן מה-session אם קיים\n  const token = getToken();\n  if (token) {\n    options.headers[\"Authorization\"] = `Bearer ${token}`;\n  }\n\n  //הרכבת כתובת-ה-API המלאה.\n  try {\n    const url = `${API_CONFIG.BASE_URL}${endpoint}`;\n    console.log(`authService: Fetching from ${url}`, options);\n\n    const response = await fetch(url, options);\n    console.log(`authService: Response status:`, response.status);\n\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({}));\n      console.error(\n        \"authService: Request failed with status\",\n        response.status,\n        errorData\n      );\n      throw new Error(errorData.message || `שגיאת שרת: ${response.status}`);\n    }\n\n    const responseData = await response.json();\n    console.log(\"authService: Request successful\", responseData);\n    return responseData;\n  } catch (error) {\n    console.error(\"authService: Request failed:\", error);\n    throw error;\n  }\n};\n\n// Save auth token and user data to session storage\nconst setSession = (token, userData) => {\n  sessionStorage.setItem(AUTH_TOKEN_KEY, token);\n  sessionStorage.setItem(USER_DATA_KEY, JSON.stringify(userData));\n};\n\n// Clear auth token and user data from session storage\nconst clearSession = () => {\n  sessionStorage.removeItem(AUTH_TOKEN_KEY);\n  sessionStorage.removeItem(USER_DATA_KEY);\n};\n\n// Get auth token from session storage\nconst getToken = () => {\n  return sessionStorage.getItem(AUTH_TOKEN_KEY);\n};\n\n// Get user data from session storage\nconst getUserData = () => {\n  const userData = sessionStorage.getItem(USER_DATA_KEY);\n  return userData ? JSON.parse(userData) : null;\n};\n\n// Check if user is authenticated\nconst isAuthenticated = () => {\n  return !!getToken();\n};\n\n// Check if user has admin role\nconst isAdmin = () => {\n  const userData = getUserData();\n  return userData && userData.user_type === \"admin\";\n};\n\n// Authentication service\nconst authService = {\n  // User login\n  login: async (email, password) => {\n    console.log(\"authService.login: Starting login process\", { email });\n    try {\n      const data = await authRequest(\"/auth/login\", \"POST\", {\n        email,\n        password,\n      });\n      console.log(\"authService.login: Login successful\", data);\n      if (data.token && data.user) {\n        console.log(\"authService.login: Setting session\");\n        setSession(data.token, data.user);\n      } else {\n        console.warn(\n          \"authService.login: Missing token or user data in response\"\n        );\n      }\n      return data;\n    } catch (error) {\n      console.error(\"authService.login: Login failed\", error);\n      throw error;\n    }\n  },\n\n  // User registration\n  register: async (userData) => {\n    const data = await authRequest(\"/auth/register\", \"POST\", userData);\n    return data;\n  },\n\n  // User logout\n  logout: () => {\n    clearSession();\n  },\n\n  // Password reset request\n  resetPassword: async (email) => {\n    return await authRequest(\"/auth/reset-password\", \"POST\", { email });\n  },\n\n  // Get current user\n  getCurrentUser: () => {\n    return getUserData();\n  },\n\n  // Check if user is authenticated\n  isAuthenticated,\n\n  // Check if user has admin role\n  isAdmin,\n};\n\nexport default authService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}