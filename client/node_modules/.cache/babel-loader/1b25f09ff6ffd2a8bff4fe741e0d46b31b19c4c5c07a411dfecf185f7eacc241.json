{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lanan\\\\Downloads\\\\HealthyLifeStyle4\\\\client\\\\src\\\\components\\\\ProtectedRoute.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\n\n/**\n * Protected route component that redirects to login if user is not authenticated\n * Can also restrict access based on user role (e.g., admin only)\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  children,\n  adminOnly = false\n}) => {\n  _s();\n  const {\n    isAuthenticated,\n    isAdmin,\n    loading\n  } = useAuth();\n  const location = useLocation();\n\n  // Show loading state while checking authentication\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-container\",\n      dir: \"rtl\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u05D8\\u05D5\\u05E2\\u05DF...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Check if user is authenticated\n  if (!isAuthenticated()) {\n    // Redirect to login page with return URL\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      state: {\n        from: location.pathname\n      },\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Check if route requires admin access\n  if (adminOnly && !isAdmin()) {\n    // Redirect to home page if user is not an admin\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Render the protected component\n  return children;\n};\n_s(ProtectedRoute, \"yEh7LKoC3G0LVVV9gFErT07ugdk=\", false, function () {\n  return [useAuth, useLocation];\n});\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Navigate","useLocation","useAuth","jsxDEV","_jsxDEV","ProtectedRoute","children","adminOnly","_s","isAuthenticated","isAdmin","loading","location","className","dir","fileName","_jsxFileName","lineNumber","columnNumber","to","state","from","pathname","replace","_c","$RefreshReg$"],"sources":["C:/Users/lanan/Downloads/HealthyLifeStyle4/client/src/components/ProtectedRoute.jsx"],"sourcesContent":["import React from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport { useAuth } from '../contexts/AuthContext';\n\n/**\n * Protected route component that redirects to login if user is not authenticated\n * Can also restrict access based on user role (e.g., admin only)\n */\nconst ProtectedRoute = ({ children, adminOnly = false }) => {\n  const { isAuthenticated, isAdmin, loading } = useAuth();\n  const location = useLocation();\n\n  // Show loading state while checking authentication\n  if (loading) {\n    return (\n      <div className=\"loading-container\" dir=\"rtl\">\n        <p>טוען...</p>\n      </div>\n    );\n  }\n\n  // Check if user is authenticated\n  if (!isAuthenticated()) {\n    // Redirect to login page with return URL\n    return <Navigate to=\"/login\" state={{ from: location.pathname }} replace />;\n  }\n\n  // Check if route requires admin access\n  if (adminOnly && !isAdmin()) {\n    // Redirect to home page if user is not an admin\n    return <Navigate to=\"/\" replace />;\n  }\n\n  // Render the protected component\n  return children;\n};\n\nexport default ProtectedRoute;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,WAAW,QAAQ,kBAAkB;AACxD,SAASC,OAAO,QAAQ,yBAAyB;;AAEjD;AACA;AACA;AACA;AAHA,SAAAC,MAAA,IAAAC,OAAA;AAIA,MAAMC,cAAc,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,SAAS,GAAG;AAAM,CAAC,KAAK;EAAAC,EAAA;EAC1D,MAAM;IAAEC,eAAe;IAAEC,OAAO;IAAEC;EAAQ,CAAC,GAAGT,OAAO,CAAC,CAAC;EACvD,MAAMU,QAAQ,GAAGX,WAAW,CAAC,CAAC;;EAE9B;EACA,IAAIU,OAAO,EAAE;IACX,oBACEP,OAAA;MAAKS,SAAS,EAAC,mBAAmB;MAACC,GAAG,EAAC,KAAK;MAAAR,QAAA,eAC1CF,OAAA;QAAAE,QAAA,EAAG;MAAO;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACX,CAAC;EAEV;;EAEA;EACA,IAAI,CAACT,eAAe,CAAC,CAAC,EAAE;IACtB;IACA,oBAAOL,OAAA,CAACJ,QAAQ;MAACmB,EAAE,EAAC,QAAQ;MAACC,KAAK,EAAE;QAAEC,IAAI,EAAET,QAAQ,CAACU;MAAS,CAAE;MAACC,OAAO;IAAA;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC7E;;EAEA;EACA,IAAIX,SAAS,IAAI,CAACG,OAAO,CAAC,CAAC,EAAE;IAC3B;IACA,oBAAON,OAAA,CAACJ,QAAQ;MAACmB,EAAE,EAAC,GAAG;MAACI,OAAO;IAAA;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACpC;;EAEA;EACA,OAAOZ,QAAQ;AACjB,CAAC;AAACE,EAAA,CA3BIH,cAAc;EAAA,QAC4BH,OAAO,EACpCD,WAAW;AAAA;AAAAuB,EAAA,GAFxBnB,cAAc;AA6BpB,eAAeA,cAAc;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}